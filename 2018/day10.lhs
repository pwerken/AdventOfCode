--- Day 10: The Stars Align ---

It's no use; your navigation system simply isn't capable of providing
walking directions in the arctic circle, and certainly not in 1018.

The Elves suggest an alternative. In times like these, North Pole rescue
operations will arrange points of light in the sky to guide missing Elves
back to base. Unfortunately, the message is easy to miss: the points move
slowly enough that it takes hours to align them, but have so much momentum
that they only stay aligned for a second. If you blink at the wrong time,
it might be hours before another message appears.

You can see these points of light floating in the distance, and record
their position in the sky and their velocity, the relative change in
position per second (your puzzle input). The coordinates are all given from
your perspective; given enough time, those positions and velocities will
move the points into a cohesive message!

Rather than wait, you decide to fast-forward the process and calculate what
the points will eventually spell.

For example, suppose you note the following points:

    position=< 9,  1> velocity=< 0,  2>
    position=< 7,  0> velocity=<-1,  0>
    position=< 3, -2> velocity=<-1,  1>
    position=< 6, 10> velocity=<-2, -1>
    position=< 2, -4> velocity=< 2,  2>
    position=<-6, 10> velocity=< 2, -2>
    position=< 1,  8> velocity=< 1, -1>
    position=< 1,  7> velocity=< 1,  0>
    position=<-3, 11> velocity=< 1, -2>
    position=< 7,  6> velocity=<-1, -1>
    position=<-2,  3> velocity=< 1,  0>
    position=<-4,  3> velocity=< 2,  0>
    position=<10, -3> velocity=<-1,  1>
    position=< 5, 11> velocity=< 1, -2>
    position=< 4,  7> velocity=< 0, -1>
    position=< 8, -2> velocity=< 0,  1>
    position=<15,  0> velocity=<-2,  0>
    position=< 1,  6> velocity=< 1,  0>
    position=< 8,  9> velocity=< 0, -1>
    position=< 3,  3> velocity=<-1,  1>
    position=< 0,  5> velocity=< 0, -1>
    position=<-2,  2> velocity=< 2,  0>
    position=< 5, -2> velocity=< 1,  2>
    position=< 1,  4> velocity=< 2,  1>
    position=<-2,  7> velocity=< 2, -2>
    position=< 3,  6> velocity=<-1, -1>
    position=< 5,  0> velocity=< 1,  0>
    position=<-6,  0> velocity=< 2,  0>
    position=< 5,  9> velocity=< 1, -2>
    position=<14,  7> velocity=<-2,  0>
    position=<-3,  6> velocity=< 2, -1>

Each line represents one point. Positions are given as <X, Y> pairs: X
represents how far left (negative) or right (positive) the point appears,
while Y represents how far up (negative) or down (positive) the point
appears.

At 0 seconds, each point has the position given. Each second, each point's
velocity is added to its position. So, a point with velocity <1, -2> is
moving to the right, but is moving upward twice as quickly. If this point's
initial position were <3, 9>, after 3 seconds, its position would become
<6, 3>.

Over time, the points listed above would move like this:

    Initially:
    ........#.............
    ................#.....
    .........#.#..#.......
    ......................
    #..........#.#.......#
    ...............#......
    ....#.................
    ..#.#....#............
    .......#..............
    ......#...............
    ...#...#.#...#........
    ....#..#..#.........#.
    .......#..............
    ...........#..#.......
    #...........#.........
    ...#.......#..........

    After 1 second:
    ......................
    ......................
    ..........#....#......
    ........#.....#.......
    ..#.........#......#..
    ......................
    ......#...............
    ....##.........#......
    ......#.#.............
    .....##.##..#.........
    ........#.#...........
    ........#...#.....#...
    ..#...........#.......
    ....#.....#.#.........
    ......................
    ......................

    After 2 seconds:
    ......................
    ......................
    ......................
    ..............#.......
    ....#..#...####..#....
    ......................
    ........#....#........
    ......#.#.............
    .......#...#..........
    .......#..#..#.#......
    ....#....#.#..........
    .....#...#...##.#.....
    ........#.............
    ......................
    ......................
    ......................

    After 3 seconds:
    ......................
    ......................
    ......................
    ......................
    ......#...#..###......
    ......#...#...#.......
    ......#...#...#.......
    ......#####...#.......
    ......#...#...#.......
    ......#...#...#.......
    ......#...#...#.......
    ......#...#..###......
    ......................
    ......................
    ......................
    ......................

    After 4 seconds:
    ......................
    ......................
    ......................
    ............#.........
    ........##...#.#......
    ......#.....#..#......
    .....#..##.##.#.......
    .......##.#....#......
    ...........#....#.....
    ..............#.......
    ....#......#...#......
    .....#.....##.........
    ...............#......
    ...............#......
    ......................
    ......................

After 3 seconds, the message appeared briefly: HI. Of course, your message
will be much longer and will take many more seconds to appear.

What message will eventually appear in the sky?

>
> type Pos = (Int, Int)
> type Star = (Pos, Pos)
> type Stars = [Star]
>
> parse :: String -> [Stars]
> parse = iterate moveStars . map parseStar . lines
>   where
>     parseStar :: String -> Star
>     parseStar s = let (x, as) = split ',' . drop 10 $ s
>                       (y, bs) = split '>' as
>                       (a, cs) = split ',' . drop 11 $ bs
>                       (b, _)  = split '>' cs
>                    in ((read x, read y), (read a, read b))
>
> starsArea :: Stars -> Int
> starsArea ss = let xs = map fst . map fst $ ss
>                    ys = map snd . map fst $ ss
>                    f zs = maximum zs - minimum zs
>                 in (f xs) * (f ys)
>
> whileSmaller :: [Stars] -> [Stars]
> whileSmaller (xs:ys:zs) =
>     let x = starsArea xs
>         y = starsArea ys
>      in if x < y then [xs] else xs : whileSmaller (ys:zs)
>
>
> plotStars :: Stars -> String
> plotStars ss = let f (x, y) = (y, x)
>                    ps = sortWith f . makePositive . map fst $ last ss
>                    w  = maximum $ map fst ps
>                    h  = maximum $ map snd ps
>                 in drawStars (w, h) (0, 0) $ nub ps
>   where
>     makePositive :: [Pos] -> [Pos]
>     makePositive ps = let x = minimum . map fst $ ps
>                           y = minimum . map snd $ ps
>                        in map (mapSnd (flip (-) y) . mapFst (flip (-) x)) ps
>
>     drawSs :: Pos -> Pos -> [Pos] -> String
>     drawSs (w, _) (a, _) []     = drawF (w - a) "\n\n" ""
>     drawSs (w, h) (a, b) ((x, y):zs)
>         | b == y    = drawF (x - a) "#"  $ drawSs (w, h) (x + 1, y) zs
>         | otherwise = drawF (w - a) "\n" $ drawSs (w, h) (0, b + 1) ((x,y):zs)
>
>     drawF :: Int -> String -> String -> String
>     drawFl ds c t = concat [replicate ds '.', c, t]
>
> day10 = solve' "10" (plotStars . whileSmaller . iterate moveStars . parse)

123456789_123456789_123456789_123456789_123456789_123456789_123456789_123456789_


--- Part Two ---

Good thing you didn't have to wait, because that would have taken a long
time - much longer than the 3 seconds in the example above.

Impressed by your sub-hour communication capabilities, the Elves are
curious: exactly how many seconds would they have needed to wait for that
message to appear?

>
> wait = flip (-) 1 . length
>
> day10p2 = solve "10" (wait . whileSmaller . iterate moveStars . parse)
